[
    {
        "id": "nl-powerpredict-flow",
        "type": "tab",
        "label": "NL-PowerPredict Integration",
        "disabled": false,
        "info": "Integration with NL-PowerPredict v3.0 for Victron battery optimization"
    },
    {
        "id": "fetch-predictions",
        "type": "inject",
        "z": "nl-powerpredict-flow",
        "name": "Every Hour",
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 100,
        "wires": [["get-predictions"]]
    },
    {
        "id": "get-predictions",
        "type": "http request",
        "z": "nl-powerpredict-flow",
        "name": "Get 24h Predictions",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost/api/predictions/next24",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 350,
        "y": 100,
        "wires": [["parse-predictions", "store-predictions"]]
    },
    {
        "id": "parse-predictions",
        "type": "function",
        "z": "nl-powerpredict-flow",
        "name": "Parse Battery Action",
        "func": "// Extract battery recommendation\nconst recommendation = msg.payload.battery_recommendation;\nconst predictions = msg.payload.predictions;\n\n// Find current hour prediction\nconst currentHour = predictions[0];\nconst currentPrice = currentHour.price_cent_kwh;\n\n// Determine battery action\nlet batteryCommand = {};\n\nswitch(recommendation.action) {\n    case 'CHARGE':\n        batteryCommand = {\n            mode: 1,  // Charge mode\n            power: 10000,  // 10kW charging\n            reason: recommendation.reason\n        };\n        break;\n    case 'DISCHARGE':\n        batteryCommand = {\n            mode: 2,  // Discharge mode\n            power: 10000,  // 10kW discharge\n            reason: recommendation.reason\n        };\n        break;\n    case 'HOLD':\n    default:\n        batteryCommand = {\n            mode: 0,  // Idle mode\n            power: 0,\n            reason: recommendation.reason\n        };\n}\n\n// Add metadata\nbatteryCommand.price = currentPrice;\nbatteryCommand.confidence = recommendation.confidence;\nbatteryCommand.timestamp = new Date().toISOString();\n\nmsg.payload = batteryCommand;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 100,
        "wires": [["victron-control", "debug-output"]]
    },
    {
        "id": "victron-control",
        "type": "victron-output-custom",
        "z": "nl-powerpredict-flow",
        "name": "Victron Battery Control",
        "service": "com.victronenergy.battery",
        "path": "/Mode",
        "serviceObj": {
            "service": "com.victronenergy.battery",
            "name": "Battery"
        },
        "pathObj": {
            "path": "/Mode",
            "type": "enum",
            "name": "Mode",
            "writable": true
        },
        "x": 810,
        "y": 100,
        "wires": []
    },
    {
        "id": "store-predictions",
        "type": "function",
        "z": "nl-powerpredict-flow",
        "name": "Store in Context",
        "func": "// Store predictions in flow context for other nodes\nflow.set('predictions', msg.payload.predictions);\nflow.set('lastUpdate', new Date());\n\n// Calculate statistics\nconst prices = msg.payload.predictions.map(p => p.price_cent_kwh);\nconst stats = {\n    min: Math.min(...prices),\n    max: Math.max(...prices),\n    avg: prices.reduce((a,b) => a+b, 0) / prices.length,\n    current: prices[0]\n};\n\nflow.set('priceStats', stats);\n\nmsg.payload = stats;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 570,
        "y": 160,
        "wires": [["dashboard-update"]]
    },
    {
        "id": "dashboard-update",
        "type": "ui_text",
        "z": "nl-powerpredict-flow",
        "group": "price-display",
        "order": 1,
        "width": 6,
        "height": 2,
        "name": "Current Price",
        "label": "Current Price",
        "format": "{{msg.payload.current}} cent/kWh",
        "layout": "col-center",
        "x": 780,
        "y": 160,
        "wires": []
    },
    {
        "id": "optimization-scheduler",
        "type": "function",
        "z": "nl-powerpredict-flow",
        "name": "4-Day Battery Schedule",
        "func": "// Advanced battery scheduling for 96 hours\nconst predictions = flow.get('predictions') || [];\nconst batteryCapacity = 60; // kWh\nconst chargeRate = 10; // kW\nconst dischargeRate = 10; // kW\nconst efficiency = 0.95;\n\n// Find optimal charge/discharge windows\nlet schedule = [];\nlet currentSOC = 50; // Start at 50% SOC\n\nfor (let i = 0; i < Math.min(predictions.length, 96); i++) {\n    const price = predictions[i].price_cent_kwh;\n    const hour = i;\n    \n    // Calculate percentiles for dynamic thresholds\n    const prices = predictions.map(p => p.price_cent_kwh).slice(0, 24);\n    const p30 = prices.sort((a,b) => a-b)[Math.floor(prices.length * 0.3)];\n    const p70 = prices.sort((a,b) => a-b)[Math.floor(prices.length * 0.7)];\n    \n    let action = 'HOLD';\n    let targetPower = 0;\n    \n    if (price <= p30 && currentSOC < 90) {\n        action = 'CHARGE';\n        targetPower = chargeRate;\n        currentSOC = Math.min(100, currentSOC + (chargeRate * efficiency / batteryCapacity * 100));\n    } else if (price >= p70 && currentSOC > 20) {\n        action = 'DISCHARGE';\n        targetPower = dischargeRate;\n        currentSOC = Math.max(0, currentSOC - (dischargeRate / batteryCapacity * 100));\n    }\n    \n    schedule.push({\n        hour: hour,\n        time: new Date(Date.now() + hour * 3600000).toISOString(),\n        action: action,\n        power: targetPower,\n        price: price,\n        soc: currentSOC\n    });\n}\n\nmsg.payload = schedule;\nflow.set('batterySchedule', schedule);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 590,
        "y": 220,
        "wires": [["schedule-output"]]
    },
    {
        "id": "debug-output",
        "type": "debug",
        "z": "nl-powerpredict-flow",
        "name": "Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 40,
        "wires": []
    },
    {
        "id": "schedule-output",
        "type": "file",
        "z": "nl-powerpredict-flow",
        "name": "Save Schedule",
        "filename": "/home/pi/battery-schedule.json",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 800,
        "y": 220,
        "wires": [[]]
    }
]